(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{281:function(t,_,o){"use strict";o.r(_);var e=o(14),v=Object(e.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"原型与原型链"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#原型与原型链"}},[t._v("#")]),t._v(" 原型与原型链")]),t._v(" "),_("p",[t._v("原型和原型链又是"),_("code",[t._v("js")]),t._v("中最重要的点之一，从"),_("code",[t._v("jQuery")]),t._v("到现在最火的框架之一"),_("code",[t._v("Vue")]),t._v("，原型的应用无处不在，那我们该怎么学好"),_("code",[t._v("JavaScript")]),t._v("的原型和原型链呢？首先我们来看一张图。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://i.ibb.co/FVxQg5d/We-Chat225b55de3b4ae290795eb8a1146b401b.png",alt:"原型链",title:"原型链"}})]),t._v(" "),_("ul",[_("li",[t._v("想要弄清楚原型和原型链，这几个属性必须要搞清楚，"),_("code",[t._v("__proto__")]),t._v("、"),_("code",[t._v("prototype")]),t._v("、 "),_("code",[t._v("constructor")])]),t._v(" "),_("li",[t._v("其次你要知道"),_("code",[t._v("js")]),t._v("中对象和函数的关系，函数其实是对象的一种。")]),t._v(" "),_("li",[t._v("最后你要知道函数、构造函数的区别，任何函数都可以作为构造函数，但是并不能将任意函数叫做构造函数，只有当一个函数通过new关键字调用的时候才可以成为构造函数。")])]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("var Parent = function(){\n\n}\n//定义一个函数，那它只是一个普通的函数，下面我们让这个函数变得不普通\nvar p1 = new Parent();\n//这时这个Parent就不是普通的函数了，它现在是一个构造函数。因为通过new关键字调用了它\n//创建了一个Parent构造函数的实例 p1\n")])])]),_("p",[t._v("如果到这你都能理解，我们再引出一个概念，开始说过了要想清楚原型就要先搞清楚这三个属性，"),_("code",[t._v("__proto__")]),t._v("、"),_("code",[t._v("prototype")]),t._v("、 "),_("code",[t._v("constructor")]),t._v("。")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("__proto__")]),t._v("、 "),_("code",[t._v("constructor")]),t._v("属性是对象所独有的；")]),t._v(" "),_("li",[_("code",[t._v("prototype")]),t._v("属性是函数独有的；")]),t._v(" "),_("li",[t._v("上面说过"),_("code",[t._v("js")]),t._v("中函数也是对象的一种，那么函数同样也有属性"),_("code",[t._v("__proto__")]),t._v("、 "),_("code",[t._v("constructor")]),t._v("；")])]),t._v(" "),_("p",[t._v("下面开始进入正题，我将上面的一张图拆分成3张图，分别讲解对应的3个属性。")]),t._v(" "),_("h2",{attrs:{id:"prototype属性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#prototype属性"}},[t._v("#")]),t._v(" prototype属性")]),t._v(" "),_("blockquote",[_("p",[t._v("为了方便举例，我们在这模拟一个场景，父类比作师父，子类比作徒弟。师父收徒弟，\n徒弟还可以收徒弟。徒弟可以得到师父传授的武功，然后徒弟再传给自己的徒弟。\n师父想要传授给徒弟们的武功就放到"),_("code",[t._v("prototype")]),t._v("这个琅琊福地中。徒弟徒孙们就去这里学习武功。")]),t._v(" "),_("p",[_("code",[t._v("prototype")]),t._v("属性可以看成是一块特殊的存储空间，存储了供“徒弟”、“徒孙”们使用的方法和属性。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://i.ibb.co/s9VpJQ3/323548351-1642fae65598fc65.png",alt:"prototype",title:"prototype"}})]),t._v(" "),_("p",[t._v("它是函数独有的属性，从图中可以看到它从一个函数指向另一个对象，代表这个对象是这个函数的原型对象，这个对象也是当前函数所创建的实例的原型对象。")]),t._v(" "),_("p",[_("code",[t._v("prototype")]),t._v("设计之初就是为了实现继承，让由特定函数创建的所有实例共享属性和方法，也可以说是让某一个构造函数实例化的所有对象可以找到公共的方法和属性。有了"),_("code",[t._v("prototype")]),t._v("我们不需要为每一个实例创建重复的属性方法，而是将属性方法创建在构造函数的原型对象上（"),_("code",[t._v("prototype")]),t._v("）。那些不需要共享的才创建在构造函数中。")]),t._v(" "),_("p",[t._v("继续引用上面的代码，当我们想为通过"),_("code",[t._v("Parent")]),t._v("实例化的所有实例添加一个共享的属性时，")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v('Parent.prototype.name = "我是原型属性，所有实例都可以读取到我";\n')])])]),_("p",[t._v("这就是原型属性，当然你也可以添加原型方法。那问题来了，p1怎么知道他的原型对象上有这个方法呢，往下看↓↓↓")]),t._v(" "),_("h2",{attrs:{id:"proto属性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#proto属性"}},[t._v("#")]),t._v(" proto属性")]),t._v(" "),_("blockquote",[_("p",[_("code",[t._v("__proto__")]),t._v("属性相当于通往"),_("code",[t._v("prototype")]),t._v("（“琅琊福地”）唯一的路（指针）\n让“徒弟”、“徒孙” 们找到自己“师父”、“师父的师父” 提供给自己的方法和属性")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://i.ibb.co/s9VpJQ3/323548351-1642fae65598fc65.png",alt:"proto",title:"__proto__"}})]),t._v(" "),_("p",[_("code",[t._v("__proto__")]),t._v("属性是对象（包括函数）独有的。从图中可以看到"),_("code",[t._v("__proto__")]),t._v("属性是从一个对象指向另一个对象，即从一个对象指向该对象的原型对象（也可以理解为父对象）。显然它的含义就是告诉我们一个对象的原型对象是谁。")]),t._v(" "),_("p",[_("code",[t._v("prototype")]),t._v("篇章我们说到，"),_("code",[t._v("Parent.prototype")]),t._v("上添加的属性和方法叫做原型属性和原型方法，该构造函数的实例都可以访问调用。那这个构造函数的原型对象上的属性和方法，怎么能和构造函数的实例联系在一起呢，就是通过"),_("code",[t._v("__proto__")]),t._v("属性。每个对象都有"),_("code",[t._v("__proto__")]),t._v("属性，该属性指向的就是该对象的原型对象。")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("p1.__proto__ === Parent.prototype; // true\n")])])]),_("p",[_("code",[t._v("__proto__")]),t._v("通常称为隐式原型，"),_("code",[t._v("prototype")]),t._v("通常称为显式原型，那我们可以说一个对象的隐式原型指向了该对象的构造函数的显式原型。那么我们在显式原型上定义的属性方法，通过隐式原型传递给了构造函数的实例。这样一来实例就能很容易的访问到构造函数原型上的方法和属性了。")]),t._v(" "),_("p",[t._v("我们之前也说过"),_("code",[t._v("__proto__")]),t._v("属性是对象（包括函数）独有的，那么"),_("code",[t._v("Parent.prototype")]),t._v("也是对象，那它有隐式原型么？又指向谁？")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("Parent.prototype.__proto__ === Object.prototype; //true\n")])])]),_("p",[t._v("可以看到，构造函数的原型对象上的隐式原型对象指向了"),_("code",[t._v("Object")]),t._v("的原型对象。那么"),_("code",[t._v("Parent")]),t._v("的原型对象就继承了"),_("code",[t._v("Object")]),t._v("的原型对象。由此我们可以验证一个结论，万物继承自"),_("code",[t._v("Object.prototype")]),t._v("。这也就是为什么我们可以实例化一个对象，并且可以调用该对象上没有的属性和方法了。如：")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("//我们并没有在Parent中定义任何方法属性，但是我们可以调用\np1.toString();//hasOwnProperty 等等的一些方法\n")])])]),_("p",[t._v("我们可以调用很多我们没有定义的方法，这些方法是哪来的呢？现在引出原型链的概念，当我们调用"),_("code",[t._v("p1.toString()")]),t._v("的时候，先在"),_("code",[t._v("p1")]),t._v("对象本身寻找，没有找到则通过"),_("code",[t._v("p1.__proto__")]),t._v("找到了原型对象"),_("code",[t._v("Parent.prototype")]),t._v("，也没有找到，又通过"),_("code",[t._v("Parent.prototype.__proto__")]),t._v("找到了上一层原型对象"),_("code",[t._v("Object.prototype")]),t._v("。在这一层找到了"),_("code",[t._v("toString")]),t._v("方法。返回该方法供p1使用。\n当然如果找到"),_("code",[t._v("Object.prototype")]),t._v("上也没找到，就在"),_("code",[t._v("Object.prototype.__proto__")]),t._v("中寻找，但是"),_("code",[t._v("Object.prototype.__proto__ === null")]),t._v("所以就返回"),_("code",[t._v("undefined")]),t._v("。这就是为什么当访问对象中一个不存在的属性时，返回"),_("code",[t._v("undefined")]),t._v("了。")]),t._v(" "),_("h2",{attrs:{id:"constructor属性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#constructor属性"}},[t._v("#")]),t._v(" constructor属性")]),t._v(" "),_("blockquote",[_("p",[t._v("constructor属性是让“徒弟”、“徒孙” 们知道是谁创造了自己，这里可不是“师父”啊")]),t._v(" "),_("p",[t._v("而是自己的父母，父母创造了自己，父母又是由上一辈人创造的，……追溯到头就是Function() 【女娲】。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://i.ibb.co/s9VpJQ3/323548351-1642fae65598fc65.png",alt:"constructor",title:"constructor"}})]),t._v(" "),_("p",[_("code",[t._v("constructor")]),t._v("是对象才有的属性，从图中看到它是从一个对象指向一个函数的。指向的函数就是该对象的构造函数。每个对象都有构造函数，好比我们上面的代码"),_("code",[t._v("p1")]),t._v("就是一个对象，那p1的构造函数是谁呢？我们打印一下。")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("console.log(p1.constructor); // ƒ Parent(){}\n")])])]),_("p",[t._v("通过输出结果看到，很显然是"),_("code",[t._v("Parent")]),t._v("函数。我们有说过函数也是对象，那"),_("code",[t._v("Parent")]),t._v("函数是不是也有构造函数呢？显然是有的。再次打印下。")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("console.log(Parent.constructor); // ƒ Function() { [native code] }\n")])])]),_("p",[t._v("通过输出看到"),_("code",[t._v("Parent")]),t._v("函数的构造函数是"),_("code",[t._v("Function()")]),t._v("，这点也不奇怪，因为我们每次定义函数其实都是调用了"),_("code",[t._v("new Function()")]),t._v("，下面两种效果是一样的。")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("var fn1 = new Function('msg','alert(msg)');\nfunction fn1(msg){\n    alert(msg);\n}\n")])])]),_("p",[t._v("那么我们再回来看下，再次打印"),_("code",[t._v("Function.constructor")])]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("console.log(Function.constructor); // ƒ Function() { [native code] }\n")])])]),_("p",[t._v("可以看到"),_("code",[t._v("Function")]),t._v("函数的构造函数就是本身了，那我们也就可以说"),_("code",[t._v("Function")]),t._v("是所有函数的根构造函数。\n到这里我们已经对"),_("code",[t._v("constructor")]),t._v("属性有了一个初步的认识，它的作用是从一个对象指向一个函数，这个函数就是该对象的构造函数。通过栗子我们可以看到，"),_("code",[t._v("p1")]),t._v("的"),_("code",[t._v("constructor")]),t._v("属性指向了"),_("code",[t._v("Parent")]),t._v("，那么"),_("code",[t._v("Parent")]),t._v("就是"),_("code",[t._v("p1")]),t._v("的构造函数。同样"),_("code",[t._v("Parent")]),t._v("的"),_("code",[t._v("constructor")]),t._v("属性指向了"),_("code",[t._v("Function")]),t._v("，那么"),_("code",[t._v("Function")]),t._v("就是"),_("code",[t._v("Parent")]),t._v("的构造函数，然后又验证了"),_("code",[t._v("Function")]),t._v("就是根构造函数。")]),t._v(" "),_("blockquote",[_("p",[t._v("值得注意的是 "),_("code",[t._v("typeof (null)")]),t._v(" 会返回 "),_("code",[t._v("Object")]),t._v(" ，这是因为 "),_("code",[t._v("JS")]),t._v(" 二进制前三位都为0的话会被判断为 "),_("code",[t._v("Object")]),t._v(" 类型，"),_("code",[t._v("null")]),t._v(" 的二进制表示是全0，自然前三位也是0，所以执行 "),_("code",[t._v("typeof")]),t._v(" 时会返回 "),_("code",[t._v("Object")]),t._v("，实际 "),_("code",[t._v("null")]),t._v(" 为基本数据类型。")])])])}),[],!1,null,null,null);_.default=v.exports}}]);