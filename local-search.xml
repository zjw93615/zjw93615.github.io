<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端日志上报的实现</title>
    <link href="/2023/04/13/%E6%9D%82%E8%B0%88/%E5%89%8D%E7%AB%AF%E6%97%A5%E5%BF%97%E4%B8%8A%E6%8A%A5%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/04/13/%E6%9D%82%E8%B0%88/%E5%89%8D%E7%AB%AF%E6%97%A5%E5%BF%97%E4%B8%8A%E6%8A%A5%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前端日志上报的实现"><a href="#前端日志上报的实现" class="headerlink" title="前端日志上报的实现"></a>前端日志上报的实现</h1><p>在前端开发中，日志上报是一个常见的需求，它涵盖了从按钮点击到整个操作流程追踪的范围。为了达到这个目的，需要进行日志记录、埋点和日志上报等工作。</p><h2 id="为什么我们需要前端日志"><a href="#为什么我们需要前端日志" class="headerlink" title="为什么我们需要前端日志"></a>为什么我们需要前端日志</h2><p>因为绝大多数用户都是通过前端来与系统进行交互的，前端的质量和稳定性就成了用户对于系统最直观的体现。同时前端代码又是直接运行在用户的电脑上的，很多情况下出现了错误或者页面崩溃的情况，开发人员都没有办法第一时间发现和进行处理。同时由于用户的系统和浏览器显示设备等多样性，使得很多情况未必能在开发时候就考虑周到。</p><p>综上所述，前端日志就显得格外重要。它能够及时反馈用户的错误，包括用户的浏览器，操作系统，显示分辨率等参数，以便后期复现以及修复问题。</p><h2 id="日志内容"><a href="#日志内容" class="headerlink" title="日志内容"></a>日志内容</h2><p>为了收集准确且有用的信息，以便用于故障排除和调试，前端日志应包括以下内容：</p><p>时间戳：错误发生的时间。</p><p>错误消息：关于所发生错误的简明描述。</p><p>错误类型：错误的类型，例如语法错误、运行时错误或逻辑错误。</p><p>严重程度：错误对系统或用户体验造成的影响级别。</p><p>用户信息：关于遇到错误的用户的详细信息，例如他们的浏览器、设备、操作系统和 IP 地址。</p><p>堆栈跟踪：导致错误的代码和函数的列表。</p><p>上下文信息：其他信息，可以帮助开发人员了解发生错误的情况，例如应用程序的当前状态、用户的操作以及任何以前的错误或事件。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AppInfo</span> &#123;<br>    appID?: <span class="hljs-built_in">string</span><br>    version?: <span class="hljs-built_in">string</span><br>    appName?: <span class="hljs-built_in">string</span><br>    [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SystemInfo</span> &#123;<br>    ua?: <span class="hljs-built_in">string</span><br>    isCookie?: <span class="hljs-built_in">number</span><br>    cookie?: <span class="hljs-built_in">string</span><br>    screenHeight?: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span><br>    screenWidth?: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span><br>    [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserInfo</span> &#123;<br>    userID?: <span class="hljs-built_in">string</span><br>    userLanguage?: <span class="hljs-built_in">string</span><br>    token?: <span class="hljs-built_in">string</span><br>    [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EasyEvent</span> &#123;<br>    <span class="hljs-attr">eventType</span>: <span class="hljs-built_in">string</span><br>    logLevel?: <span class="hljs-variable constant_">LOG_LEVEL</span><br>    elemId?: <span class="hljs-built_in">string</span><br>    createTime?: <span class="hljs-built_in">string</span><br>    extraParams?: <span class="hljs-built_in">object</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="日志上报的实现"><a href="#日志上报的实现" class="headerlink" title="日志上报的实现"></a>日志上报的实现</h2><p>我们可以相信的到，日志上报最方便的就是做成一个console类似的类，把错误信息直接传入方法中即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">easyLogReport.<span class="hljs-title function_">log</span>(&#123;<br>    <span class="hljs-attr">eventType</span>: <span class="hljs-string">&#x27;onLoad&#x27;</span>,<br>    <span class="hljs-attr">elemId</span>: <span class="hljs-string">&#x27;App&#x27;</span>,<br>    <span class="hljs-attr">extraParams</span>: &#123;<br>        <span class="hljs-comment">// other extra params</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;onLoad&#x27;</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>eventType - 埋点事件类型，它可能是点击事件、页面初始化、页面激活、请求事件…</p><p>elemId - 埋点标识，后续进行埋点数据提取的重要标识</p><p>extraParams - 额外的上报内容，丰富埋点的含义帮助后续做更加精细、完善的分析</p><p>获取到了这些日志之后，我们可以在前端过滤一下这个日志，因为某些错误有可能在短时间内触发了很多次。我们就只需要把这些相同内容的日志聚合一下，没必要100个相同的报错一起给后端发去，减少网络流量以及后端处理压力。<br>实践中选择了后端进行处理，主要担心前端性能问题，而且队列也不能设置太大，其实对于重复生成的错误日志也不能很好地过滤。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 过滤1秒内连续抛出同一错误</span><br>debounce = <span class="hljs-function">()=&gt;</span>&#123;  <br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timeout</span> !== <span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timeout</span>);<br>  &#125;      <br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">timeout</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> max = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">max</span> || <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-property">size</span> &gt;= max) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">catchBack</span>()<br>    &#125;<br>  &#125;, <span class="hljs-number">1000</span>);    <br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">selfError</span> + <span class="hljs-string">&quot;debounce&quot;</span>,error)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>之后就是给服务器发送日志了。这里并没有所谓最正确的做法，因为最终发送日志上报请求的方式有很多种，有些是GET请求、有些是请求一张图片而有些则是发送POST请求。不同的请求方式，发送日志内容的时机也不太一样。</p><p>如果是GET请求的方式进行日志上报，则一般是埋点触发后，产生日志条目就直接发送到日志服务。</p><p>如果是POST请求的方式，则有大多数会在项目中维护一个日志上报队列，从日志条数、上报间隔等维度进行日志条目的统一上报。</p><p>无论是使用哪种方式进行日志上报，都需要在上报前对对埋点的内容进行预处理，让它符合日志服务的要求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* report log by img url function */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">sendImage</span> = (<span class="hljs-params">data: ReportContent, sendUrl: string</span>)=&gt;&#123;<br>    <span class="hljs-keyword">let</span> image = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>    image.<span class="hljs-property">src</span> = sendUrl + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));<br>    image.<span class="hljs-property">onerror</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;EasyLogReport - log data send from image src error&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* report log by sendBeacon function */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">beacon</span> = (<span class="hljs-params">data: ReportContent, sendUrl: string</span>)=&gt;&#123;<br>    <span class="hljs-keyword">if</span> (!navigator?.<span class="hljs-property">sendBeacon</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;EasyLogReport - current env don\&#x27;t support sendBeacon!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    navigator.<span class="hljs-title function_">sendBeacon</span>(sendUrl, <span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data)))<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码分别是通过图片get的方法进行返回，以及使用因为Beacon的方式进行返回。</p><p>这里建议使用因为Beacon的方式，因为Beacon API 是用来向 server 端传输小批量数据的，并且不需要等待 server 端的响应。相比与xhr的请求，Beacon的优点不接受响应，浏览器可以把请求队列起来，然后发送，而不会阻塞任何其他代码的执行。</p><p>比如说你需要记录 unload 或 beforeunload 的事件日志记录。这些事件通常在用户跳转链接时触发。这里的问题是，unload 事件中的代码可以阻塞代码执行且推迟页面的卸载。如果当前页面的卸载被推迟了，那也就是说，下个页面的加载也被推迟了，最后导致页面跳转的体验变得迟缓。</p><p>最后用一张图来总结一下整个日志上报的实践过程。</p><p><img src="https://user-images.githubusercontent.com/2912039/230709216-1b491c6c-3704-4103-ba06-b057f33422b8.jpg" alt="5c6f01d93d1d4de1bf8eb2d49e714e59~tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0"></p><p>最后，插件地址在 <a href="https://www.npmjs.com/package/easy-log-report">https://www.npmjs.com/package/easy-log-report</a>，这个只是日志上报插件，后续会进行错误捕捉，性能监控插件的开发。</p><p>参考资料：</p><p><a href="https://zhuanlan.zhihu.com/p/47749670">前端错误日志收集方案</a></p><p><a href="https://juejin.cn/post/7107539513378865188">前端日志上报实践</a></p><p><a href="https://www.cnblogs.com/Khadron/p/14535334.html">手撸一个前端日志上报组件</a></p><p><a href="https://github.com/xian107/react-error-catch">react-error-catch</a></p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>npm</tag>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端对接GPT实现打字机效果</title>
    <link href="/2023/04/13/%E6%9D%82%E8%B0%88/%E5%89%8D%E7%AB%AF%E5%AF%B9%E6%8E%A5GPT%E5%AE%9E%E7%8E%B0%E6%89%93%E5%AD%97%E6%9C%BA%E6%95%88%E6%9E%9C/"/>
    <url>/2023/04/13/%E6%9D%82%E8%B0%88/%E5%89%8D%E7%AB%AF%E5%AF%B9%E6%8E%A5GPT%E5%AE%9E%E7%8E%B0%E6%89%93%E5%AD%97%E6%9C%BA%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="前端对接GPT实现打字机效果"><a href="#前端对接GPT实现打字机效果" class="headerlink" title="前端对接GPT实现打字机效果"></a>前端对接GPT实现打字机效果</h1><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>现在GPT可为非常火热，我们在这篇文章中将会研究如何通过 HTTP 请求和 SSE（Server-Sent Events）协议连接，并实现了基于流式 API 的长时间运行的聊天打字机效果，即用户输入一条消息后，模型逐步返回一个完整的对话内容。</p><h2 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h2><p>首先我们看看正常的api请求都是都是需要后端处理完成数据后，把数据打包好再一次性发送到前端。 但是由于GPT需要完成所有文字的生成之后才会进行返回，神经网络生成长文章可能需要15s甚至更长的时间，所以我们可以看到如果GPT生成返回的内容越多，接口返回的速度就回越慢。平均返回时间一般可以达到15s以上。而且由于网络、墙等问题，很容易让用户产生是否接口请求失败了，于是刷新页面重新请求的操作。</p><p><img src="https://user-images.githubusercontent.com/2912039/230705256-a310aff3-9afa-4481-b792-5753250ef08f.png" alt="image"></p><p>由于GPT内容生成模型是以token为单位进行内容生成的，即不需要等待所有内容生成完成即可有数据返回。这时我们可以使用GPT api提供的stream参数，这个参数会让GPT立刻返回新生成的token内容，服务器会把token作为纯数据向客户端发送事件，就像在 ChatGPT 中一样，如果内容发送完成了，将以data: [DONE]结束。</p><p><img src="https://user-images.githubusercontent.com/2912039/230705309-e4767ebf-fa99-4e90-ac1d-34bb789dadfb.png" alt="image"></p><p>这样我们就可以在GPT生成第一个token的时候即可以得到数据反馈并进行展示，减少了用户的等待时间，极大提升用户体验。如下图中，我们测试的问题只用了1.37s即有第一批token返回。</p><p><img src="https://user-images.githubusercontent.com/2912039/230705329-7423be3c-8a89-4597-93a5-7ac8f5dec34e.png" alt="image"></p><p>在我们了解了优化方式之后，我们就可以开始进行撸代码了。</p><h2 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h2><p>那么我们需要怎么在前端去接受这种SSE的请求呢？简单的SSE GET请求可以通过EventSource来实现。但是由于GPT的chat和completions接口都是POST请求，所以我们需要稍微绕一下弯路，通过fetch来实现。下面直接上代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://localhost:8080/api/chatGPT/chat&#x27;</span>, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>    messages,<br>    ...config,<br>  &#125;),<br>&#125;)<br><br><span class="hljs-comment">// 创建 Reader 对象</span><br><span class="hljs-keyword">const</span> reader = response?.<span class="hljs-property">body</span>?.<span class="hljs-title function_">getReader</span>();<br><span class="hljs-comment">// 创建解码器</span><br><span class="hljs-keyword">const</span> decoder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextDecoder</span>(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">readChunk</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 读取服务器返回的字符串数据</span><br>  <span class="hljs-keyword">return</span> reader?.<span class="hljs-title function_">read</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; value, done &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!done) &#123;<br>      <span class="hljs-keyword">const</span> dataString = decoder.<span class="hljs-title function_">decode</span>(value);<br>      <span class="hljs-comment">// 循环读取字符串的内容。</span><br>      dataString.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;data: &quot;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">async</span> (line) =&gt; &#123;<br>        <span class="hljs-keyword">if</span> (line !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>          <span class="hljs-comment">// 去掉标识符 data:</span><br>          <span class="hljs-keyword">const</span> text = line.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;data: &quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 转化为 js Object</span><br>            <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(text)<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">choices</span>[<span class="hljs-number">0</span>])<br>            <span class="hljs-keyword">if</span> (data.<span class="hljs-property">choices</span>[<span class="hljs-number">0</span>].<span class="hljs-property">delta</span>.<span class="hljs-property">content</span>) &#123;<br>              <span class="hljs-comment">// 获取返回的内容，即token</span><br>              result += data.<span class="hljs-property">choices</span>[<span class="hljs-number">0</span>].<span class="hljs-property">delta</span>.<span class="hljs-property">content</span><br>              <span class="hljs-comment">// 保存并更新渲染</span><br>              <span class="hljs-keyword">const</span> resList = _.<span class="hljs-title function_">cloneDeep</span>(newList)<br>              resList[resList.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] = &#123;<br>                <span class="hljs-attr">content</span>: marked.<span class="hljs-title function_">parse</span>(result),<br>                <span class="hljs-attr">role</span>: <span class="hljs-string">&#x27;assistant&#x27;</span><br>              &#125;<br>              <span class="hljs-title function_">setTextList</span>(resList)<br>            &#125;<br>            <span class="hljs-keyword">if</span> (data.<span class="hljs-property">choices</span>[<span class="hljs-number">0</span>].<span class="hljs-property">finish_reason</span> === <span class="hljs-string">&#x27;length&#x27;</span>) &#123;<br>              <span class="hljs-comment">// 长度限制了，可以再次请求更新</span><br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;token 不足，请再次提交&#x27;</span>)<br>              <span class="hljs-title function_">setChatLoading</span>(<span class="hljs-literal">false</span>)<br>              <span class="hljs-keyword">return</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data.<span class="hljs-property">choices</span>[<span class="hljs-number">0</span>].<span class="hljs-property">finish_reason</span> === <span class="hljs-string">&#x27;stop&#x27;</span>) &#123;<br>              <span class="hljs-comment">// 遇到停止符，GPT不再生成内容</span><br>              <span class="hljs-comment">// 保存并更新渲染</span><br>              <span class="hljs-keyword">const</span> resList = _.<span class="hljs-title function_">cloneDeep</span>(newList)<br>              resList[resList.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] = &#123;<br>                <span class="hljs-attr">content</span>: marked.<span class="hljs-title function_">parse</span>(result),<br>                <span class="hljs-attr">role</span>: <span class="hljs-string">&#x27;assistant&#x27;</span><br>              &#125;<br>              <span class="hljs-title function_">setTextList</span>(resList)<br>              <span class="hljs-title function_">setChatLoading</span>(<span class="hljs-literal">false</span>)<br>              <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">readChunk</span>();<br>          &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>            <span class="hljs-comment">// 流结束了，但是没有错误错误。</span><br>            <span class="hljs-comment">// 可能是 createCompletion 的 DONE 消息</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error)<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text)<br>            <span class="hljs-keyword">if</span> (text.<span class="hljs-title function_">trim</span>() === <span class="hljs-string">&#x27;[DONE]&#x27;</span>) &#123;<br>              <span class="hljs-comment">// GPT 已经生成完了所有内容</span><br>              <span class="hljs-comment">// 保存并更新渲染</span><br>              <span class="hljs-keyword">const</span> resList = _.<span class="hljs-title function_">cloneDeep</span>(newList)<br>              resList[resList.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] = &#123;<br>                <span class="hljs-attr">content</span>: marked.<span class="hljs-title function_">parse</span>(result),<br>                <span class="hljs-attr">role</span>: <span class="hljs-string">&#x27;assistant&#x27;</span><br>              &#125;<br>              <span class="hljs-title function_">setTextList</span>(resList)<br>              <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-title function_">setChatLoading</span>(<span class="hljs-literal">false</span>)<br>          &#125;<br>        &#125;<br>        <span class="hljs-comment">// 保持一直滚动到最下方</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">let</span> scroll_to_bottom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;chat_gpt_text_list&#x27;</span>);<br>          scroll_to_bottom?.<span class="hljs-title function_">scroll</span>(&#123;<span class="hljs-attr">top</span>: scroll_to_bottom.<span class="hljs-property">scrollHeight</span>, <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;smooth&quot;</span>&#125;)<br>        &#125;, <span class="hljs-number">50</span>)<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 流读完了，结束</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;done&quot;</span>);<br>    &#125;<br>  &#125;);<br>&#125;;<br><br><span class="hljs-keyword">await</span> <span class="hljs-title function_">readChunk</span>();<br></code></pre></td></tr></table></figure><p>这里使用了 marked.js 库，用于将 Markdown 格式文本转换为 HTML 格式。</p><p>通过 fetch 向 Node.js 服务器发送一个POST请求包含用户第一条消息内容的 JSON 对象，并将 HTTP 响应的流数据解析为字符串并逐行处理。</p><p>在每次从流中读取到的新数据中，将 JSON 字符串解析为对象后提取出模型生成的回复文本，并使用 marked.js 将其转换为 HTML 文本。</p><p>当模型返回的 finish_reason 字段为 “stop” 或者 “length” 时，停止递归调用 readChunk() 函数并更新 React 中 state 的状态，触发更新渲染。</p><h2 id="koa后端"><a href="#koa后端" class="headerlink" title="koa后端"></a>koa后端</h2><p>实现完前端，我们再来看看后端代码实现。这里就简单用koa做一个代理转发，其实也可以前端直接调用GPT api的地址。但是由于GPT和国内双向屏蔽，所以还是部署一个国外的服务器比较省心。</p><p>下面是koa端的Service层代码。引用了openai的包，并按照GPT api的接口文档进行对接。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Configuration</span>, <span class="hljs-title class_">OpenAIApi</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;openai&#x27;</span>);<br><br><br><span class="hljs-keyword">const</span> configuration = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(&#123;<br>  <span class="hljs-attr">organization</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">OPENAI_API_ORGANIZATION</span>,<br>  <span class="hljs-attr">apiKey</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">OPENAI_API_KEY</span>,<br>&#125;);<br><span class="hljs-keyword">const</span> openai = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAIApi</span>(configuration);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createCompletion</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">params</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> openai.<span class="hljs-title function_">createCompletion</span>(&#123;<br>    <span class="hljs-attr">model</span>: params.<span class="hljs-property">model</span> || <span class="hljs-string">&quot;text-davinci-003&quot;</span>,<br>    <span class="hljs-attr">prompt</span>: params.<span class="hljs-property">prompt</span>,<br>    <span class="hljs-attr">temperature</span>: params.<span class="hljs-property">temperature</span> || <span class="hljs-number">0.9</span>,<br>    <span class="hljs-attr">max_tokens</span>: params.<span class="hljs-property">max_tokens</span> || <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">top_p</span>: params.<span class="hljs-property">top_p</span> || <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">frequency_penalty</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">presence_penalty</span>: <span class="hljs-number">0</span>,<br>  &#125;);<br>  <span class="hljs-keyword">return</span> response.<span class="hljs-property">data</span>.<span class="hljs-property">choices</span>[<span class="hljs-number">0</span>].<span class="hljs-property">text</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createChatCompletion</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">params</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> openai.<span class="hljs-title function_">createChatCompletion</span>(&#123;<br>    <span class="hljs-attr">model</span>: params.<span class="hljs-property">model</span> || <span class="hljs-string">&#x27;gpt-3.5-turbo&#x27;</span>,<br>    <span class="hljs-attr">messages</span>: params.<span class="hljs-property">messages</span> || [],<br>    <span class="hljs-attr">temperature</span>: params.<span class="hljs-property">temperature</span> || <span class="hljs-number">0.9</span>,<br>    <span class="hljs-attr">max_tokens</span>: params.<span class="hljs-property">max_tokens</span> || <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">top_p</span>: params.<span class="hljs-property">top_p</span> || <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">frequency_penalty</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">presence_penalty</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">stream</span>: <span class="hljs-literal">true</span><br>  &#125;, &#123; <span class="hljs-attr">responseType</span>: <span class="hljs-string">&#x27;stream&#x27;</span> &#125;)<br>  <span class="hljs-keyword">return</span> response.<span class="hljs-property">data</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createImage</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">params</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> openai.<span class="hljs-title function_">createImage</span>(&#123;<br>    <span class="hljs-attr">prompt</span>: params.<span class="hljs-property">prompt</span>,<br>    <span class="hljs-attr">n</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">size</span>: <span class="hljs-string">&#x27;512x512&#x27;</span><br>  &#125;);<br>  <span class="hljs-keyword">return</span> response.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getListModels</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">params</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> openai.<span class="hljs-title function_">listModels</span>();<br>  <span class="hljs-keyword">return</span> response.<span class="hljs-property">data</span><br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  createCompletion,<br>  createChatCompletion,<br>  createImage,<br>  getListModels<br>&#125;;<br></code></pre></td></tr></table></figure><p>下面是koa的Controller层的代码，定义了一些返回包体的结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">createCompletion</span>: createCompletionHelper, <span class="hljs-attr">createChatCompletion</span>: createChatCompletionHelper, <span class="hljs-attr">getListModels</span>: getListModelsHelper, <span class="hljs-attr">createImage</span>: createImageHelper &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../helpers/chatGPT.helpers&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ErrorShowType</span> = &#123;<br>  <span class="hljs-attr">SILENT</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">WARN_MESSAGE</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">ERROR_MESSAGE</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">NOTIFICATION</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-attr">REDIRECT</span>: <span class="hljs-number">9</span>,<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createCompletion</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">ctx</span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    ctx.<span class="hljs-property">body</span> = &#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">data</span>: <span class="hljs-keyword">await</span> <span class="hljs-title function_">createCompletionHelper</span>(ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span>)<br>    &#125;<br>    ctx.<span class="hljs-property">status</span> = <span class="hljs-number">200</span>;<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    ctx.<span class="hljs-property">body</span> = &#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">errorCode</span>: <span class="hljs-number">500</span>,<br>      <span class="hljs-attr">errorMessage</span>: err,<br>      <span class="hljs-attr">showType</span>: <span class="hljs-title class_">ErrorShowType</span>.<span class="hljs-property">ERROR_MESSAGE</span>,<br>    &#125;;<br>    ctx.<span class="hljs-property">status</span> = <span class="hljs-number">500</span>;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createChatCompletion</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">ctx</span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    ctx.<span class="hljs-property">body</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">createChatCompletionHelper</span>(ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span>)<br>    ctx.<span class="hljs-property">status</span> = <span class="hljs-number">200</span>;<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    ctx.<span class="hljs-property">body</span> = &#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">errorCode</span>: <span class="hljs-number">500</span>,<br>      <span class="hljs-attr">errorMessage</span>: err,<br>      <span class="hljs-attr">showType</span>: <span class="hljs-title class_">ErrorShowType</span>.<span class="hljs-property">ERROR_MESSAGE</span>,<br>    &#125;;<br>    ctx.<span class="hljs-property">status</span> = <span class="hljs-number">500</span>;<br>  &#125;<br>&#125;;<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createImage</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">ctx</span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    ctx.<span class="hljs-property">body</span> = &#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">data</span>: <span class="hljs-keyword">await</span> <span class="hljs-title function_">createImageHelper</span>(ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span>)<br>    &#125;<br>    ctx.<span class="hljs-property">status</span> = <span class="hljs-number">200</span>;<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    ctx.<span class="hljs-property">body</span> = &#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">errorCode</span>: <span class="hljs-number">500</span>,<br>      <span class="hljs-attr">errorMessage</span>: err,<br>      <span class="hljs-attr">showType</span>: <span class="hljs-title class_">ErrorShowType</span>.<span class="hljs-property">ERROR_MESSAGE</span>,<br>    &#125;;<br>    ctx.<span class="hljs-property">status</span> = <span class="hljs-number">500</span>;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getListModels</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">ctx</span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    ctx.<span class="hljs-property">body</span> = &#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">data</span>: <span class="hljs-keyword">await</span> <span class="hljs-title function_">getListModelsHelper</span>()<br>    &#125;<br>    ctx.<span class="hljs-property">status</span> = <span class="hljs-number">200</span>;<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    ctx.<span class="hljs-property">body</span> = &#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">errorCode</span>: <span class="hljs-number">500</span>,<br>      <span class="hljs-attr">errorMessage</span>: err,<br>      <span class="hljs-attr">showType</span>: <span class="hljs-title class_">ErrorShowType</span>.<span class="hljs-property">ERROR_MESSAGE</span>,<br>    &#125;;<br>    ctx.<span class="hljs-property">status</span> = <span class="hljs-number">500</span>;<br>  &#125;<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  createCompletion,<br>  createChatCompletion,<br>  createImage,<br>  getListModels<br>&#125;;<br></code></pre></td></tr></table></figure><p>这个时候，我们就已经完成了GPT的对接以及前端实现快速响应，以及打字机展示结果的展示效果。这个是我最近对GPT的一些前端研究，希望各位如果有什么更新颖的想法以及应用，欢迎交流。</p><p>本文的代码都会放在 <a href="https://github.com/zjw93615/gtp-demo">https://github.com/zjw93615/gtp-demo</a> 仓库中，欢迎各位查漏补缺。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ChatGPT</tag>
      
      <tag>nodejs</tag>
      
      <tag>SSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS overflow-anchor属性的一些坑</title>
    <link href="/2023/04/13/Css/CSS-overflow-anchor%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <url>/2023/04/13/Css/CSS-overflow-anchor%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS-overflow-anchor属性的一些坑"><a href="#CSS-overflow-anchor属性的一些坑" class="headerlink" title="CSS overflow-anchor属性的一些坑"></a>CSS overflow-anchor属性的一些坑</h1><p>之前在做虚拟滚动组件，但是在做虚拟滚动的时候却发现当你往上方填充空白区间的时候，scrollTop属性也跟着更新了，导致了计算时候的一些错误。后来发现是CSS overflow-anchor属性导致的问题。下面我来讲讲这个滚动锚定属性是有什么作用的。</p><p>大家都知道，比较常用的虚拟滚动就是只显示中间用户能够看的见的值，其余用户看不见的值，就填充空白的div以优化性能。</p><p><img src="https://user-images.githubusercontent.com/2912039/230706172-d81bb2ca-06d4-4a57-9c1a-7e97d5ae36c8.png" alt="image"></p><p>但是这次在做虚拟滚动的时候却发现当你往上方填充空白区间的时候，scrollTop属性也跟着更新了，导致了计算时候的一些错误。后来发现是CSS overflow-anchor属性导致的问题。下面我来讲讲这个滚动锚定属性是有什么作用的。</p><h2 id="什么是滚动锚定"><a href="#什么是滚动锚定" class="headerlink" title="什么是滚动锚定"></a>什么是滚动锚定</h2><p>滚动锚定是一种浏览器功能，它是用来防止你在 DOM 完全加载之前向下滚动网页的常见情况，如果没有滚动锚定，你所看到的内容就会一直被往下推。大家可能有过这样的浏览体验，就是图片很多的时候，例如漫画网站，在手机端，垂直布局这种，如果上方的图片加载慢，那么下方的图片看着看着就会被推下来，然后自己又要重新去滚动定位。</p><p>这是一个不太友好的浏览器体验行为。 于是，Chrome 56（2017年）和Firefox 66（2019年）开始，这些浏览器就对滚动行为进行了优化，实现了一种“滚动锚定”的交互行为。 具体描述为：当前视区上面的内容突然出现的时候，浏览器自动改变滚动高度，让视区窗口区域内容固定，就像滚动效果被锚定一样。</p><p>因此，在PC端，在Chrome浏览器下和Firefox浏览器下，当你浏览网页的时候，是感觉不到页面跳动的，就是滚动锚定在其作用。</p><h2 id="overflow-anchor属性"><a href="#overflow-anchor属性" class="headerlink" title="overflow-anchor属性"></a>overflow-anchor属性</h2><p>overflow-anchor属性的值非常简单，它接受两个值，它们本质上切换是否启用该功能。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">overflow-anchor: [ <span class="hljs-keyword">auto</span> | none ];<br></code></pre></td></tr></table></figure><p>auto（默认）：在页面或元素应用它的部分启用滚动锚定。</p><p>none：禁用部分或全部网页的滚动锚定，或将 DOM 的一部分排除在锚定之外，从而允许内容重排。</p><p>overflow-anchor属性可以放在body中对全局生效，也可以单独放在某个元素中，对部分页面元素起作用。</p><h2 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h2><p>下面我们看看具体应用到元素中会有什么不同，下面的案例是实时效果，大家可以直接滚动操作，左边是默认的overflow-anchor:auto，右边设置的是overflow-anchor:none。</p><iframe allowfullscreen="true" frameborder="no" scrolling="no" src="https://codepen.io/chriscoyier/embed/oWgENp?default-tab=result" style="height: 400px; width: 100%;" title="overflow-anchor">See the Pen <a href="https://codepen.io/chriscoyier/pen/oWgENp"> overflow-anchor</a> by Chris Coyier (<a href="https://codepen.io/chriscoyier">@chriscoyier</a>) on <a href="https://codepen.io">CodePen</a>.</iframe><p>这个属性其实对于很多用户刷新应用都非常有用。 例如，一个聊天应用程序，在这个页面中，新消息会添加到底部的 DOM，如果你希望一直看到最新的消息，这个时候就可以把overflow-anchor设置为none，详细参考下面的demo：</p><iframe allowfullscreen="true" frameborder="no" scrolling="no" src="https://codepen.io/chriscoyier/embed/bGbeBdp?default-tab=result" style="height: 400px; width: 100%;" title="&quot;Stay at the bottom&quot; scrolling with scroll-anchor">See the Pen <a href="https://codepen.io/chriscoyier/pen/bGbeBdp"> &amp;quot;Stay at the bottom&amp;quot; scrolling with scroll-anchor</a> by Chris Coyier (<a href="https://codepen.io/chriscoyier">@chriscoyier</a>) on <a href="https://codepen.io">CodePen</a>.</iframe><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然overflow-anchor属性还不是W3C的标准，但是已经提上了日程，提供了规范的草案报告可供阅读，并且自版本 56 起已被 Chrome 采用。Mozilla 正在考虑在 Firefox 中使用类似的功能。 随着越来越多的浏览器采用滚动锚定功能，我们可能期望看到更多浏览器支持溢出锚定，因为它提供了明确的控制来选择是否使用滚动锚定这个特性。</p><p><img src="https://user-images.githubusercontent.com/2912039/230706404-76369b04-886e-4482-94f1-f8df6bdb54dd.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>Css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型与原型链</title>
    <link href="/2023/04/13/Javascript/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2023/04/13/Javascript/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h1><p>原型和原型链又是<code>js</code>中最重要的点之一，从<code>jQuery</code>到现在最火的框架之一<code>Vue</code>，原型的应用无处不在，那我们该怎么学好<code>JavaScript</code>的原型和原型链呢？首先我们来看一张图。</p><img src="/2023/04/13/Javascript/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/img.png" class="" title="原型链"><ul><li>想要弄清楚原型和原型链，这几个属性必须要搞清楚，<code>__proto__</code>、<code>prototype</code>、 <code>constructor</code></li><li>其次你要知道<code>js</code>中对象和函数的关系，函数其实是对象的一种。</li><li>最后你要知道函数、构造函数的区别，任何函数都可以作为构造函数，但是并不能将任意函数叫做构造函数，只有当一个函数通过new关键字调用的时候才可以成为构造函数。</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> Parent = <span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br><span class="hljs-comment">//定义一个函数，那它只是一个普通的函数，下面我们让这个函数变得不普通</span><br><span class="hljs-keyword">var</span> p1 = <span class="hljs-keyword">new</span> Parent();<br><span class="hljs-comment">//这时这个Parent就不是普通的函数了，它现在是一个构造函数。因为通过new关键字调用了它</span><br><span class="hljs-comment">//创建了一个Parent构造函数的实例 p1</span><br></code></pre></td></tr></table></figure><p>如果到这你都能理解，我们再引出一个概念，开始说过了要想清楚原型就要先搞清楚这三个属性，<code>__proto__</code>、<code>prototype</code>、 <code>constructor</code>。</p><ul><li><code>__proto__</code>、 <code>constructor</code>属性是对象所独有的；</li><li><code>prototype</code>属性是函数独有的；</li><li>上面说过<code>js</code>中函数也是对象的一种，那么函数同样也有属性<code>__proto__</code>、 <code>constructor</code>；</li></ul><p>下面开始进入正题，我将上面的一张图拆分成3张图，分别讲解对应的3个属性。</p><h2 id="prototype属性"><a href="#prototype属性" class="headerlink" title="prototype属性"></a>prototype属性</h2><blockquote><p>为了方便举例，我们在这模拟一个场景，父类比作师父，子类比作徒弟。师父收徒弟，<br>徒弟还可以收徒弟。徒弟可以得到师父传授的武功，然后徒弟再传给自己的徒弟。<br>师父想要传授给徒弟们的武功就放到<code>prototype</code>这个琅琊福地中。徒弟徒孙们就去这里学习武功。</p><p><code>prototype</code>属性可以看成是一块特殊的存储空间，存储了供“徒弟”、“徒孙”们使用的方法和属性。</p></blockquote><img src="/2023/04/13/Javascript/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/img_1.png" class="" title="prototype"><p>它是函数独有的属性，从图中可以看到它从一个函数指向另一个对象，代表这个对象是这个函数的原型对象，这个对象也是当前函数所创建的实例的原型对象。</p><p><code>prototype</code>设计之初就是为了实现继承，让由特定函数创建的所有实例共享属性和方法，也可以说是让某一个构造函数实例化的所有对象可以找到公共的方法和属性。有了<code>prototype</code>我们不需要为每一个实例创建重复的属性方法，而是将属性方法创建在构造函数的原型对象上（<code>prototype</code>）。那些不需要共享的才创建在构造函数中。</p><p>继续引用上面的代码，当我们想为通过<code>Parent</code>实例化的所有实例添加一个共享的属性时，</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Parent.prototype.name</span> = <span class="hljs-string">&quot;我是原型属性，所有实例都可以读取到我&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这就是原型属性，当然你也可以添加原型方法。那问题来了，p1怎么知道他的原型对象上有这个方法呢，往下看↓↓↓</p><h2 id="proto属性"><a href="#proto属性" class="headerlink" title="proto属性"></a>proto属性</h2><blockquote><p><code>__proto__</code>属性相当于通往<code>prototype</code>（“琅琊福地”）唯一的路（指针）<br>让“徒弟”、“徒孙” 们找到自己“师父”、“师父的师父” 提供给自己的方法和属性</p></blockquote><img src="/2023/04/13/Javascript/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/img_2.png" class="" title="__proto__"><p><code>__proto__</code>属性是对象（包括函数）独有的。从图中可以看到<code>__proto__</code>属性是从一个对象指向另一个对象，即从一个对象指向该对象的原型对象（也可以理解为父对象）。显然它的含义就是告诉我们一个对象的原型对象是谁。</p><p><code>prototype</code>篇章我们说到，<code>Parent.prototype</code>上添加的属性和方法叫做原型属性和原型方法，该构造函数的实例都可以访问调用。那这个构造函数的原型对象上的属性和方法，怎么能和构造函数的实例联系在一起呢，就是通过<code>__proto__</code>属性。每个对象都有<code>__proto__</code>属性，该属性指向的就是该对象的原型对象。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">p1.__proto__ <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span> Parent.prototype<span class="hljs-comment">; // true</span><br></code></pre></td></tr></table></figure><p><code>__proto__</code>通常称为隐式原型，<code>prototype</code>通常称为显式原型，那我们可以说一个对象的隐式原型指向了该对象的构造函数的显式原型。那么我们在显式原型上定义的属性方法，通过隐式原型传递给了构造函数的实例。这样一来实例就能很容易的访问到构造函数原型上的方法和属性了。</p><p>我们之前也说过<code>__proto__</code>属性是对象（包括函数）独有的，那么<code>Parent.prototype</code>也是对象，那它有隐式原型么？又指向谁？</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Parent.prototype.__proto__ <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span> Object.prototype<span class="hljs-comment">; //true</span><br></code></pre></td></tr></table></figure><p>可以看到，构造函数的原型对象上的隐式原型对象指向了<code>Object</code>的原型对象。那么<code>Parent</code>的原型对象就继承了<code>Object</code>的原型对象。由此我们可以验证一个结论，万物继承自<code>Object.prototype</code>。这也就是为什么我们可以实例化一个对象，并且可以调用该对象上没有的属性和方法了。如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>我们并没有在Parent中定义任何方法属性，但是我们可以调用<br>p1.toString();<span class="hljs-regexp">//</span>hasOwnProperty 等等的一些方法<br></code></pre></td></tr></table></figure><p>我们可以调用很多我们没有定义的方法，这些方法是哪来的呢？现在引出原型链的概念，当我们调用<code>p1.toString()</code>的时候，先在<code>p1</code>对象本身寻找，没有找到则通过<code>p1.__proto__</code>找到了原型对象<code>Parent.prototype</code>，也没有找到，又通过<code>Parent.prototype.__proto__</code>找到了上一层原型对象<code>Object.prototype</code>。在这一层找到了<code>toString</code>方法。返回该方法供p1使用。<br>当然如果找到<code>Object.prototype</code>上也没找到，就在<code>Object.prototype.__proto__</code>中寻找，但是<code>Object.prototype.__proto__ === null</code>所以就返回<code>undefined</code>。这就是为什么当访问对象中一个不存在的属性时，返回<code>undefined</code>了。</p><h2 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h2><blockquote><p>constructor属性是让“徒弟”、“徒孙” 们知道是谁创造了自己，这里可不是“师父”啊</p><p>而是自己的父母，父母创造了自己，父母又是由上一辈人创造的，……追溯到头就是Function() 【女娲】。</p></blockquote><img src="/2023/04/13/Javascript/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/img_3.png" class="" title="constructor"><p><code>constructor</code>是对象才有的属性，从图中看到它是从一个对象指向一个函数的。指向的函数就是该对象的构造函数。每个对象都有构造函数，好比我们上面的代码<code>p1</code>就是一个对象，那p1的构造函数是谁呢？我们打印一下。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(p1.constructor); <span class="hljs-comment">// ƒ Parent()&#123;&#125;</span><br></code></pre></td></tr></table></figure><p>通过输出结果看到，很显然是<code>Parent</code>函数。我们有说过函数也是对象，那<code>Parent</code>函数是不是也有构造函数呢？显然是有的。再次打印下。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Parent.constructor); <span class="hljs-comment">// ƒ Function() &#123; [native code] &#125;</span><br></code></pre></td></tr></table></figure><p>通过输出看到<code>Parent</code>函数的构造函数是<code>Function()</code>，这点也不奇怪，因为我们每次定义函数其实都是调用了<code>new Function()</code>，下面两种效果是一样的。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">var</span> fn1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Function</span><span class="hljs-params">(<span class="hljs-string">&#x27;msg&#x27;</span>,<span class="hljs-string">&#x27;alert(msg)&#x27;</span>)</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span><span class="hljs-params">(msg)</span><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    alert(msg);</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><p>那么我们再回来看下，再次打印<code>Function.constructor</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">Function</span>.constructor); <span class="hljs-comment">// ƒ Function() &#123; [native code] &#125;</span><br></code></pre></td></tr></table></figure><p>可以看到<code>Function</code>函数的构造函数就是本身了，那我们也就可以说<code>Function</code>是所有函数的根构造函数。<br>到这里我们已经对<code>constructor</code>属性有了一个初步的认识，它的作用是从一个对象指向一个函数，这个函数就是该对象的构造函数。通过栗子我们可以看到，<code>p1</code>的<code>constructor</code>属性指向了<code>Parent</code>，那么<code>Parent</code>就是<code>p1</code>的构造函数。同样<code>Parent</code>的<code>constructor</code>属性指向了<code>Function</code>，那么<code>Function</code>就是<code>Parent</code>的构造函数，然后又验证了<code>Function</code>就是根构造函数。</p><blockquote><p>值得注意的是 <code>typeof (null)</code> 会返回 <code>Object</code> ，这是因为 <code>JS</code> 二进制前三位都为0的话会被判断为 <code>Object</code> 类型，<code>null</code> 的二进制表示是全0，自然前三位也是0，所以执行 <code>typeof</code> 时会返回 <code>Object</code>，实际 <code>null</code> 为基本数据类型。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>es6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 新特性</title>
    <link href="/2023/04/13/Javascript/ES6-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2023/04/13/Javascript/ES6-%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6-新特性"><a href="#ES6-新特性" class="headerlink" title="ES6 新特性"></a>ES6 新特性</h1><p>本文只是简单概括ES6的一些新特性，想要详细了解，可以参阅<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla">MDN</a> <a href="https://es6.ruanyifeng.com/">ES6入门</a></p><p>ECMAScript 6.0（以下简称ES6）是JavaScript语言的下一代标准，已经在2015年6月正式发布了。它的目标，是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><h2 id="let-与-const"><a href="#let-与-const" class="headerlink" title="let 与 const"></a>let 与 const</h2><p><code>ES2015(ES6)</code>新增加了两个重要的<code>JavaScript</code>关键字: <code>let</code>和<code>const</code>。 <code>ES6</code>明确规定，代码块内如果存在<code>let</code>或者<code>const</code>，代码块会对这些命令声明的变量从块的开始就形成一个<strong>封闭作用域</strong>。代码块内，在<strong>声明变量之前</strong>使用它会<strong>报错</strong>，称为<strong>暂时性死区</strong>。 <code>ES6</code>的块级作用域必须有大括号，如果没有大括号，<code>JavaScript</code>引擎就认为不存在块级作用域。</p><ul><li><code>let</code>和<code>const</code>只能声明一次，<code>var</code>可以声明多次。</li><li><code>var</code>会变量提升，<code>let</code>与<code>const</code>也存在变量提升但有所不同。</li><li><code>const</code>声明一个只读的常量，一旦声明，常量的值就不能改变。</li><li><code>const</code>和<code>let</code>在全局作用域中声明的变量不会挂载到<code>window</code>上。</li><li><code>let</code>和<code>const</code>声明的变量只在其声明所在的代码块内有效，形成块级作用域。</li><li><code>const</code>其实保证的不是变量的值不变，而是保证变量指向的内存地址所保存的数据不允许改动。对于基本数据类型<code>number、string 、boolean</code>等，值就保存在变量指向的那个内存地址，因此<code>const</code> 声明的简单类型变量等同于常量。而引用类型<code>object，array，function</code>等，变量指向的内存地址其实是保存了一个指向实际数据的指针，所以<code>const</code>只能保证指针是固定的，至于指针指向的数据结构变不变就无法控制了。</li></ul><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p><code>ES6</code>允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">let [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <span class="hljs-regexp">//</span> 基本<br>let [a, [[b], c]] = [<span class="hljs-number">1</span>, [[<span class="hljs-number">2</span>], <span class="hljs-number">3</span>]]; <span class="hljs-regexp">//</span>嵌套<br>let [a, , b] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <span class="hljs-regexp">//</span> 可忽略<br>let [a = <span class="hljs-number">1</span>, b] = []; <span class="hljs-regexp">//</span> a = <span class="hljs-number">1</span>, b = undefined <span class="hljs-regexp">//</span> 不完全解构<br>let [a, ...b] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <span class="hljs-regexp">//</span> 剩余运算符<br>let [a, b, c, d, e] = <span class="hljs-string">&#x27;hello&#x27;</span>; <span class="hljs-regexp">//</span> 字符串等<br>let &#123; a, b &#125; = &#123; a: <span class="hljs-string">&#x27;aaa&#x27;</span>, b: <span class="hljs-string">&#x27;bbb&#x27;</span> &#125;; <span class="hljs-regexp">//</span> 对象模型的解构 前后两个kay需对应<br></code></pre></td></tr></table></figure><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p><code>ES6</code>引入了一种新的原始数据类型<code>Symbol</code>，表示独一无二的值，最大的用法是用来定义对象的唯一属性名。 <code>ES6</code>数据类型除了<code>Number</code>、<code>String</code>、<code>Boolean</code>、 <code>Object</code>、<code>null</code>和<code>undefined</code>，还新增了 <code>Symbol</code>。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let s1 <span class="hljs-operator">=</span> Symbol(<span class="hljs-string">&quot;s&quot;</span>)<span class="hljs-comment">;</span><br>let s2 <span class="hljs-operator">=</span> Symbol(<span class="hljs-string">&quot;s&quot;</span>)<span class="hljs-comment">;</span><br>console.log(s1 <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span> s2)<span class="hljs-comment">; //false</span><br></code></pre></td></tr></table></figure><h2 id="Spread-x2F-Rest-操作符"><a href="#Spread-x2F-Rest-操作符" class="headerlink" title="Spread &#x2F; Rest 操作符"></a>Spread &#x2F; Rest 操作符</h2><p><code>Spread</code> 用于将数组作为参数直接传入函数。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> s = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>];<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">s1,s2,s3</span>)&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`Hello <span class="hljs-subst">$&#123;s1&#125;</span>,<span class="hljs-subst">$&#123;s2&#125;</span>,<span class="hljs-subst">$&#123;s3&#125;</span>`</span>); <span class="hljs-comment">//ES6新增字符串中加入变量和表达式</span><br>&#125;<br>f(...s); <span class="hljs-comment">//Hello 1,2,3</span><br></code></pre></td></tr></table></figure><p><code>Rest</code> 用于函数传参传递数组。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-rest_arg">...args</span>)</span>&#123;<br>    console.log(args);<br>&#125;<br>f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>); <span class="hljs-comment">//[1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p><code>ES6</code>中，箭头函数就是函数的一种简写形式，使用括号包裹参数，跟随一个 <code>=&gt;</code>，紧接着是函数体，特别需要注意的是箭头函数是继承当前上下文的<code>this</code>关键字。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> add = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b;<br><span class="hljs-keyword">var</span> show = <span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br><span class="hljs-keyword">var</span> test = <span class="hljs-function">(<span class="hljs-params">a,b,c</span>) =&gt;</span> &#123;<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a,b,c);<span class="hljs-keyword">return</span> a+b+c;&#125;<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>); <span class="hljs-comment">//2</span><br>show(<span class="hljs-number">1</span>); <span class="hljs-comment">//1</span><br>test(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>); <span class="hljs-comment">//1 1 1</span><br></code></pre></td></tr></table></figure><h2 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">function <span class="hljs-built_in">f</span>(a = <span class="hljs-number">1</span>)&#123;<br>    console<span class="hljs-selector-class">.log</span>(a);<br>&#125;<br><span class="hljs-built_in">f</span>(); <span class="hljs-comment">//1</span><br><span class="hljs-built_in">f</span>(<span class="hljs-number">11</span>); <span class="hljs-comment">//11</span><br></code></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><ul><li><code>Symbol.iterator</code> 一个统一的接口，它的作用是使各种数据结构可被便捷的访问。</li><li>for of 是 ES6 新引入的循环，用于替代 <code>for..in</code> 和 <code>forEach()</code>。</li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p><code>ES6</code>提供了更接近传统语言的写法，引入了<code>class</code>这个概念，作为对象的模板。通过<code>class</code>关键字，可以定义类，与多数传统语言类似。不过，<code>ES6</code>的<code>class</code>不是新的对象继承模型，它只是原型链的语法糖表现形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Me</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;constructor&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">study</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;study&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Me</span>); <span class="hljs-comment">//function</span><br><span class="hljs-keyword">let</span> me = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Me</span>(); <span class="hljs-comment">//constructor</span><br>me.<span class="hljs-title function_">study</span>(); <span class="hljs-comment">//study</span><br></code></pre></td></tr></table></figure><h2 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h2><p><code>Promise</code>是异步编程的一种解决方案。</p><p>从语法上说，<code>Promise</code> 是一个对象，从它可以获取异步操作的消息。<br>Promise异步操作有三种状态：<code>pending</code>、<code>fulfilled</code>和<code>rejected</code>。除了异步操作的结果，任何其他操作都无法改变这个状态。<br><code>then</code>方法接收两个函数作为参数，第一个参数是<code>Promise</code>执行成功时的回调，第二个参数是 <code>Promise</code>执行失败时的回调，两个函数只会有一个被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)&#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;resolve&#x27;</span>);<br>&#125;); <br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)&#123;<br>    <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;reject&#x27;</span>);<br>&#125;);<br>p1.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>)&#123;  <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v); <span class="hljs-comment">//resolve</span><br>&#125;);<br>p2.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>)&#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v);<br>&#125;,<br><span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v); <span class="hljs-comment">//reject</span><br>&#125;);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>es6</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
